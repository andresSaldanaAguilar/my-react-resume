{"version":3,"sources":["MainResumePage.js","App.js","serviceWorker.js","index.js"],"names":["useStyles","createMuiTheme","palette","primary","purple","secondary","green","status","danger","makeStyles","theme","root","flexGrow","contact","link","description","icon","about","emoji","name","experience","header","date","clients","skills","label","rows","key","value","hobbies","MainResumePage","classes","className","Grid","container","item","xs","sm","md","lg","xl","justify","style","padding","Typography","variant","component","gutterBottom","map","Link","href","class","role","color","Chip","category","TableContainer","Table","stickyHeader","aria-label","TableHead","TableRow","TableCell","background","TableBody","row","hover","tabIndex","hobbie","TableFooter","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.a3f91524.chunk.js","sourcesContent":["import React from 'react';\r\nimport './MainResumePage.css';\r\nimport { makeStyles, rgbToHex } from '@material-ui/core/styles';\r\nimport Grid from '@material-ui/core/Grid';\r\nimport Typography from '@material-ui/core/Typography';\r\nimport Table from '@material-ui/core/Table';\r\nimport Link from '@material-ui/core/Link';\r\nimport TableBody from '@material-ui/core/TableBody';\r\nimport TableCell from '@material-ui/core/TableCell';\r\nimport TableContainer from '@material-ui/core/TableContainer';\r\nimport TableHead from '@material-ui/core/TableHead';\r\nimport TableRow from '@material-ui/core/TableRow';\r\nimport LinkedInIcon from '@material-ui/icons/LinkedIn';\r\nimport GitHubIcon from '@material-ui/icons/GitHub';\r\nimport MailIcon from '@material-ui/icons/Mail';\r\nimport PhoneIcon from '@material-ui/icons/Phone';\r\nimport TableFooter from '@material-ui/core/TableFooter';\r\nimport Chip from '@material-ui/core/Chip';\r\nimport { createMuiTheme } from '@material-ui/core/styles';\r\nimport purple from '@material-ui/core/colors/purple';\r\nimport green from '@material-ui/core/colors/green';\r\n\r\nconst theme = createMuiTheme({\r\n  palette: {\r\n    primary: purple,\r\n    secondary: green,\r\n  },\r\n  status: {\r\n    danger: 'orange',\r\n  },\r\n});\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n  root: {\r\n    flexGrow: 1,\r\n  }\r\n}));\r\n\r\nconst contact = [\r\n  {link : 'https://linkedin.com/in/andressaldanaaguilar', description : 'andressaldanaaguilar', icon : <LinkedInIcon ></LinkedInIcon>},\r\n  {link : 'https://github.com/andresSaldanaAguilar', description : 'andresSaldanaAguilar', icon: <GitHubIcon ></GitHubIcon>},\r\n  {link : 'mailto:andres.saldana.aguilar@gmail.com', description : 'andres.saldana.aguilar@gmail.com', icon : <MailIcon ></MailIcon>},\r\n  {link : '#', description : '5543890085', icon: <PhoneIcon ></PhoneIcon>}\r\n];\r\n\r\nconst about = [\r\n  {emoji : 'üë®‚Äçüíª', name : 'Computer Systems Engineer since 2020'},\r\n  {emoji : 'üè´', name : 'Escuela Superior de C√≥mputo IPN'},\r\n  {emoji : '‚úç', name : '9.14/10.00 GPA'},\r\n  {emoji : 'üéñÔ∏è', name : 'Honorable mention thesis'}\r\n];\r\n\r\nconst experience = [\r\n  { header : '‚ÄçFreelance - Full-Stack developer and analyst', date: 'Nov 2017 - Jul 2018', \r\n    description : 'Analysis, design and developing of web platform for train stoplights issues reporting, shorting report time and attendance all over the country.This platform was developed with Laravel framework and deployed on a linux cloud sever.',\r\n    clients: 'Rysh electronica S.A de C.V'},\r\n  { header : 'E-Global Software Developer Intern', date: 'Aug 2019 - Nov 2019', \r\n    description : 'Developing of web services for client transaction authentication, storage and authorization with the use of Spring Boot framework. Service Migration from Java EE to Spring Boot.', \r\n    clients: 'BBVA Bancomer, BanCoppel'},\r\n  { header : 'ThinkSkink - Software Engineer Jr', date: 'Dec 2019 - Present',\r\n    description : 'Developing of new backend, frontend, testing and deploying functionalities for business process automatization tool.',\r\n    clients: 'Telcel, Wom Chile, Nextel y Claro Per√∫'},\r\n];\r\n\r\nconst skills = [ \r\n  {\r\n    label: \"Languages\",\r\n    rows: [\r\n      {key: 'Java', value: '4 years'},\r\n      {key: 'Python', value: '2 years'},\r\n      {key: 'Android', value: '2 years'},\r\n      {key: 'JavaScript', value: '3 years'}\r\n    ]\r\n  }\r\n  ,\r\n  {\r\n    label: \"Databases\",\r\n    rows: [\r\n      {key: 'MySQL', value: '4 years'},\r\n      {key: 'OracleDB', value: '1 year'},\r\n      {key: 'Postgres', value: '1 year'},\r\n      {key: 'MongoDB', value: '< 1 year'}\r\n    ]\r\n  }\r\n  ,\r\n  {\r\n    label: \"Test Frameworks\",\r\n    rows: [\r\n      {key: 'JUnit', value: '< 1 year'},\r\n      {key: 'Selenium', value: '< 1 year'}\r\n    ]\r\n  }\r\n  ,\r\n  {\r\n    label: \"Technologies\",\r\n    rows: [  \r\n      {key: 'Spring Boot', value: '1 year'},\r\n      {key: 'Spring MVC', value: '< 1 year'},\r\n      {key: 'React', value: '< 1 year'},\r\n      {key: 'JQuery', value: '2 years'},\r\n      {key: 'Maven', value: '1 year'},\r\n      {key: 'Git', value: '3 years'}\r\n    ]\r\n  }\r\n];\r\n\r\nconst hobbies = [\r\n  {emoji : '‚ôüÔ∏è', name : 'Chess'},\r\n  {emoji : 'üì∑', name : 'Photography'},\r\n  {emoji : 'üé®', name : 'Arts'},\r\n  {emoji : 'üíªüíñ', name : 'And of course, Coding'}\r\n];\r\n\r\nexport default function MainResumePage() {\r\n  const classes = useStyles();\r\n\r\n  return (\r\n    <div className={classes.root}>\r\n      <Grid container >\r\n       \r\n        <Grid item xs={0} sm={0} md={2} lg={2} xl={2}>\r\n        </Grid>\r\n        <Grid item justify xs={12} sm={12} md={8} lg={8} xl={8} style={{padding:40}} >\r\n          \r\n          <Typography variant=\"h2\" component=\"h2\" gutterBottom>\r\n            Andr√©s Arnulfo Salda√±a Aguilar\r\n          </Typography>\r\n\r\n          <Typography variant=\"h3\" component=\"h2\" gutterBottom>Contact</Typography>\r\n          {contact.map((link) => {\r\n            return(\r\n              <Grid container>\r\n                <Grid item xs={2}>\r\n                  {link.icon}\r\n                </Grid>\r\n                <Grid item xs={10}>\r\n                  <Typography><Link variant=\"h7\" href={link.link}>{link.description}</Link></Typography>\r\n                </Grid>\r\n              </Grid>\r\n            )}\r\n          )}\r\n         \r\n          <p></p>\r\n          \r\n          <Typography variant=\"h3\" component=\"h2\" gutterBottom>About</Typography>\r\n          {about.map((item) => {\r\n            return(\r\n            <Typography component=\"h2\" gutterBottom><span class=\"emoji\" role=\"img\">{item.emoji}</span>{item.name}</Typography>\r\n            )}\r\n          )}\r\n\r\n          <p></p>\r\n\r\n          <Typography variant=\"h3\" component=\"h2\" gutterBottom>Thesis</Typography>\r\n          <Typography variant=\"h5\" component=\"h4\" gutterBottom color=\"primary\">Real time energy production monitoring</Typography>\r\n          <Typography component=\"p\" gutterBottom>\r\n            My thesis partners and I investigated and developed a system capable of\r\n            real time energy production monitoring from distinct sources, alerting\r\n            related problems on an android application. Logic was contained by an embedded server,\r\n            processing and signal treatment was handled by a microcontroller.\r\n          </Typography>\r\n          \r\n          <p></p>\r\n\r\n          <Typography variant=\"h3\" component=\"h2\" gutterBottom>Experience</Typography>\r\n          {experience.map((item) => {\r\n            return(\r\n              <div>\r\n                <Typography variant=\"h5\" component=\"h4\" gutterBottom color=\"primary\">{item.header} <Chip variant=\"outlined\" color=\"secondary\" label={item.date}/></Typography>\r\n                <Typography component=\"p\" gutterBottom>{item.description}</Typography>\r\n                <Typography component=\"p\" gutterBottom>Clients: {item.clients}</Typography>\r\n              </div>\r\n            );\r\n          })}\r\n          \r\n          <p></p>\r\n\r\n          <Typography variant=\"h3\" component=\"h2\" gutterBottom>Technical Skills</Typography>\r\n          \r\n          {skills.map((category) => {\r\n            return(\r\n              <TableContainer className={classes.container}>\r\n                <Table stickyHeader aria-label=\"sticky table\">\r\n                  <TableHead>\r\n                    <TableRow>\r\n                        <TableCell style={{background:\"#f1f1f1\"}}>{category.label}</TableCell>\r\n                        <TableCell style={{background:\"#f1f1f1\"}}></TableCell>\r\n                    </TableRow>\r\n                  </TableHead>\r\n                  <TableBody>\r\n                    {category.rows.map((row) => {\r\n                      return (\r\n                        <TableRow hover role=\"checkbox\" tabIndex={-1} >                 \r\n                              <TableCell >{row.key}</TableCell>\r\n                              <TableCell >{row.value}</TableCell>   \r\n                        </TableRow>\r\n                      );\r\n                    })}\r\n                  </TableBody>\r\n                </Table>\r\n              </TableContainer>\r\n            );\r\n          })}\r\n          \r\n          <p></p>\r\n\r\n          <Typography variant=\"h3\" component=\"h2\" gutterBottom>Hobbies</Typography>\r\n          {hobbies.map((hobbie) => {\r\n            return(\r\n              <Typography component=\"h2\" gutterBottom> <span class=\"emoji\" role=\"img\">{hobbie.emoji}</span>{hobbie.name}</Typography>\r\n            )}\r\n          )}\r\n\r\n        </Grid>\r\n      </Grid>\r\n      <TableFooter></TableFooter>\r\n    </div>\r\n  );\r\n}\r\n","import React from 'react';\nimport MainResumePage from './MainResumePage';\n\nfunction App() {\n  return (\n    <MainResumePage />\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}