{"version":3,"sources":["demo.js","theme.js","App.js","serviceWorker.js","index.js"],"names":["useStyles","makeStyles","theme","root","flexGrow","lanColumns","id","label","minWidth","dbColumns","testColumns","fmkColumns","createData","key","value","lanRows","dbRows","testRows","fmkRows","CenteredGrid","classes","className","Grid","container","item","xs","style","padding","Typography","variant","component","gutterBottom","fontSize","Link","href","class","TableContainer","Table","stickyHeader","aria-label","TableHead","TableRow","map","column","TableCell","align","background","TableBody","row","hover","role","tabIndex","code","createMuiTheme","props","MuiTypography","variantMapping","h1","h2","h3","h4","h5","h6","subtitle1","subtitle2","body1","body2","App","ThemeProvider","CssBaseline","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.be0b5eb9.chunk.js","sourcesContent":["import React from 'react';\r\nimport { makeStyles, rgbToHex } from '@material-ui/core/styles';\r\nimport Paper from '@material-ui/core/Paper';\r\nimport Grid from '@material-ui/core/Grid';\r\nimport Typography from '@material-ui/core/Typography';\r\nimport Table from '@material-ui/core/Table';\r\nimport Link from '@material-ui/core/Link';\r\nimport TableBody from '@material-ui/core/TableBody';\r\nimport TableCell from '@material-ui/core/TableCell';\r\nimport TableContainer from '@material-ui/core/TableContainer';\r\nimport TableHead from '@material-ui/core/TableHead';\r\nimport TableRow from '@material-ui/core/TableRow';\r\nimport LinkedInIcon from '@material-ui/icons/LinkedIn';\r\nimport GitHubIcon from '@material-ui/icons/GitHub';\r\nimport MailIcon from '@material-ui/icons/Mail';\r\nimport PhoneIcon from '@material-ui/icons/Phone';\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n  root: {\r\n    flexGrow: 1,\r\n  }\r\n}));\r\n\r\nconst lanColumns = [\r\n  { id: 'key', label: 'Languages', minWidth: 170 },\r\n  { id: 'value'  }\r\n];\r\n\r\nconst dbColumns = [\r\n  { id: 'key', label: 'Databases', minWidth: 170 },\r\n  { id: 'value'  }\r\n];\r\n\r\nconst testColumns = [\r\n  { id: 'key', label: 'Testing', minWidth: 170 },\r\n  { id: 'value'  }\r\n];\r\n\r\nconst fmkColumns = [\r\n  { id: 'key', label: 'Technologies', minWidth: 170 },\r\n  { id: 'value'  }\r\n];\r\n\r\n\r\nfunction createData(key, value) {\r\n  return { key, value };\r\n}\r\n\r\nconst lanRows = [\r\n  createData('Java', '4 years'),\r\n  createData('Python', '2 years'),\r\n  createData('Android', '2 years'),\r\n  createData('JavaScript', '3 years'),\r\n];\r\n\r\nconst dbRows = [\r\n  createData('MySQL', '4 years'),\r\n  createData('OracleDB', '1 year'),\r\n  createData('Postgres', '1 year'),\r\n  createData('MongoDB', '< 1 year'),\r\n];\r\n\r\nconst testRows = [\r\n  createData('JUnit', '< 1 year'),\r\n  createData('Selenium', '< 1 year')\r\n];\r\n\r\nconst fmkRows = [\r\n  createData('Spring Boot', '1 year'),\r\n  createData('Spring MVC', '< 1 year'),\r\n  createData('React', '< 1 year'),\r\n  createData('JQuery', '2 years'),\r\n  createData('Maven', '1 year'),\r\n  createData('Git', '3 years'),\r\n];\r\n\r\nexport default function CenteredGrid() {\r\n  const classes = useStyles();\r\n\r\n  return (\r\n    <div className={classes.root}>\r\n      <Grid container >\r\n        \r\n        <Grid item xs={12} style={{padding:40}}>\r\n          \r\n          <Typography variant=\"h2\" component=\"h2\" gutterBottom>\r\n            Andrés Arnulfo Saldaña Aguilar\r\n          </Typography>\r\n\r\n          <Typography variant=\"h4\" gutterBottom>Contact</Typography>\r\n          <Grid container className={classes.root}>\r\n            <Grid item xs={1}>\r\n            <LinkedInIcon style={{ fontSize: 25 }}></LinkedInIcon>\r\n            </Grid>\r\n            <Grid item xs={11}>\r\n            <Typography><Link variant=\"h7\" href=\"#\" >linkedin.com/in/andressaldanaaguilar</Link></Typography>\r\n            </Grid>\r\n          </Grid>\r\n          <Grid container className={classes.root}>\r\n            <Grid item xs={1}>\r\n            <GitHubIcon style={{ fontSize: 25 }}></GitHubIcon>\r\n            </Grid>\r\n            <Grid item xs={11}>\r\n            <Typography><Link href=\"#\" variant=\"h7\" >github.com/andresSaldanaAguilar </Link></Typography>\r\n            </Grid>\r\n          </Grid>\r\n          <Grid container className={classes.root}>\r\n            <Grid item xs={1}>\r\n            <MailIcon style={{ fontSize: 25 }}></MailIcon>\r\n            </Grid>\r\n            <Grid item xs={11}>\r\n            <Typography><Link href=\"#\" variant=\"h7\" >andres.saldana.aguilar@gmail.com</Link></Typography>\r\n            </Grid>\r\n          </Grid>\r\n          <Grid container className={classes.root}>\r\n            <Grid item xs={1}>\r\n            <PhoneIcon style={{ fontSize: 25 }}></PhoneIcon>\r\n            </Grid>\r\n            <Grid item xs={11}>\r\n            <Typography><Link href=\"#\" variant=\"h7\" >5543890085 </Link></Typography>\r\n            </Grid>\r\n          </Grid>\r\n\r\n          <p></p>\r\n          \r\n          <Typography variant=\"h4\" gutterBottom>About</Typography>\r\n          <Typography component=\"h2\" gutterBottom><span class=\"emoji\">👨‍💻</span> Computer Systems Engineer since 2020</Typography>\r\n          <Typography component=\"h2\" gutterBottom><span class=\"emoji\">🏫</span> Escuela Superior de Cómputo IPN</Typography>\r\n          <Typography component=\"h2\" gutterBottom><span class=\"emoji\">✍</span> 9.14/10.00 GPA</Typography>\r\n          <Typography component=\"h2\" gutterBottom><span class=\"emoji\">🎖️</span> Honorable mention thesis</Typography>\r\n\r\n          <p></p>\r\n\r\n\r\n          <Typography variant=\"h4\" gutterBottom>Thesis</Typography>\r\n          <Typography variant=\"h6\" gutterBottom>Real time energy production monitoring</Typography>\r\n          <Typography variant=\"p\" gutterBottom>\r\n            My thesis partners and I investigated and developed a system capable of\r\n            real time energy production monitoring from distinct sources, alerting\r\n            related problems on an android application. Logic was contained by an embedded server,\r\n            processing and signal treatment was handled by a microcontroller.\r\n          </Typography>\r\n          \r\n          <p></p>\r\n\r\n          <Typography variant=\"h4\" gutterBottom>Experience</Typography>\r\n          <Typography variant=\"h6\" gutterBottom>Freelance - Full-Stack developer and analyst (November 2017 - July 2018)</Typography>\r\n          <Typography variant=\"p\" gutterBottom>\r\n            Analysis, design and developing of web platform for train stoplights issues reporting, shorting report\r\n            time and attendance all over the country.\r\n            This platform was developed with Laravel framework and deployed on a linux cloud sever.\r\n                </Typography>\r\n\r\n          <Typography variant=\"h6\" gutterBottom>E-Global Software Developer Intern (August 2019 - November 2019)</Typography>\r\n          <Typography variant=\"p\" gutterBottom>\r\n            Developing of web services for client transaction authentication, storage and authorization\r\n            with the use of Spring Boot framework.\r\n            Service Migration from Java EE to Spring Boot.\r\n            Clients: BBVA Bancomer, BanCoppel\r\n                </Typography>\r\n\r\n          <Typography variant=\"h6\" gutterBottom>ThinkSkink - Software Engineer Jr (December 2019 - Present)</Typography>\r\n          <Typography variant=\"p\" gutterBottom>\r\n            ThinkSkink - Software Engineer Jr (December 2019 - Present)\r\n            Developing of new backend, frontend, testing and deploying functionalities for business process automatization tool.\r\n            Clients: Telcel, Wom Chile, Nextel y Claro Perú\r\n                </Typography>\r\n\r\n          <p></p>\r\n\r\n          <Typography variant=\"h4\" gutterBottom>Technical Skills</Typography>\r\n          <TableContainer className={classes.container}>\r\n            <Table stickyHeader aria-label=\"sticky table\">\r\n              <TableHead>\r\n                <TableRow>\r\n                  {fmkColumns.map((column) => (\r\n                    <TableCell\r\n                      key={column.id}\r\n                      align={column.align}\r\n                      style={{ minWidth: column.minWidth, background:\"#f1f1f1\"}}\r\n                    >\r\n                      {column.label}\r\n                    </TableCell>\r\n                  ))}\r\n                </TableRow>\r\n              </TableHead>\r\n              <TableBody>\r\n                {fmkRows.map((row) => {\r\n                  return (\r\n                    <TableRow hover role=\"checkbox\" tabIndex={-1} key={row.code}>\r\n                      {lanColumns.map((column) => {\r\n                        const value = row[column.id];\r\n                        return (\r\n                          <TableCell key={column.id} align={column.align}>\r\n                            {value}\r\n                          </TableCell>\r\n                        );\r\n                      })}\r\n                    </TableRow>\r\n                  );\r\n                })}\r\n              </TableBody>\r\n            </Table>\r\n          </TableContainer>\r\n          <TableContainer className={classes.container}>\r\n            <Table stickyHeader aria-label=\"sticky table\">\r\n              <TableHead>\r\n                <TableRow>\r\n                  {lanColumns.map((column) => (\r\n                    <TableCell\r\n                      key={column.id}\r\n                      align={column.align}\r\n                      style={{ minWidth: column.minWidth, background:\"#f1f1f1\"}}\r\n                    >\r\n                      {column.label}\r\n                    </TableCell>\r\n                  ))}\r\n                </TableRow>\r\n              </TableHead>\r\n              <TableBody>\r\n                {lanRows.map((row) => {\r\n                  return (\r\n                    <TableRow hover role=\"checkbox\" tabIndex={-1} key={row.code}>\r\n                      {lanColumns.map((column) => {\r\n                        const value = row[column.id];\r\n                        return (\r\n                          <TableCell key={column.id} align={column.align}>\r\n                            {value}\r\n                          </TableCell>\r\n                        );\r\n                      })}\r\n                    </TableRow>\r\n                  );\r\n                })}\r\n              </TableBody>\r\n            </Table>\r\n          </TableContainer>\r\n          <TableContainer className={classes.container}>\r\n            <Table stickyHeader aria-label=\"sticky table\">\r\n              <TableHead>\r\n                <TableRow>\r\n                  {dbColumns.map((column) => (\r\n                    <TableCell\r\n                      key={column.id}\r\n                      align={column.align}\r\n                      style={{ minWidth: column.minWidth, background:\"#f1f1f1\"}}\r\n                    >\r\n                      {column.label}\r\n                    </TableCell>\r\n                  ))}\r\n                </TableRow>\r\n              </TableHead>\r\n              <TableBody>\r\n                {dbRows.map((row) => {\r\n                  return (\r\n                    <TableRow hover role=\"checkbox\" tabIndex={-1} key={row.code}>\r\n                      {lanColumns.map((column) => {\r\n                        const value = row[column.id];\r\n                        return (\r\n                          <TableCell key={column.id} align={column.align}>\r\n                            {value}\r\n                          </TableCell>\r\n                        );\r\n                      })}\r\n                    </TableRow>\r\n                  );\r\n                })}\r\n              </TableBody>\r\n            </Table>\r\n          </TableContainer>\r\n          <TableContainer className={classes.container}>\r\n            <Table stickyHeader aria-label=\"sticky table\">\r\n              <TableHead>\r\n                <TableRow>\r\n                  {testColumns.map((column) => (\r\n                    <TableCell\r\n                      key={column.id}\r\n                      align={column.align}\r\n                      style={{ minWidth: column.minWidth, background:\"#f1f1f1\"}}\r\n                    >\r\n                      {column.label}\r\n                    </TableCell>\r\n                  ))}\r\n                </TableRow>\r\n              </TableHead>\r\n              <TableBody>\r\n                {testRows.map((row) => {\r\n                  return (\r\n                    <TableRow hover role=\"checkbox\" tabIndex={-1} key={row.code}>\r\n                      {lanColumns.map((column) => {\r\n                        const value = row[column.id];\r\n                        return (\r\n                          <TableCell key={column.id} align={column.align}>\r\n                            {value}\r\n                          </TableCell>\r\n                        );\r\n                      })}\r\n                    </TableRow>\r\n                  );\r\n                })}\r\n              </TableBody>\r\n            </Table>\r\n          </TableContainer>\r\n\r\n          <p></p>\r\n          <Typography variant=\"h4\" gutterBottom>Hobbies</Typography>\r\n          <Typography component=\"h2\" gutterBottom> <span class=\"emoji\">♟️</span> Chess</Typography>\r\n          <Typography component=\"h2\" gutterBottom><span class=\"emoji\">📷</span> Photography</Typography>\r\n          <Typography component=\"h2\" gutterBottom> <span class=\"emoji\">🎨</span>Arts</Typography>\r\n          <Typography component=\"h2\" gutterBottom><span class=\"emoji\">💻💖</span>And of course, Coding </Typography>\r\n        </Grid>\r\n      </Grid>\r\n    </div>\r\n  );\r\n}\r\n","import { createMuiTheme }  from '@material-ui/core/styles'\r\nconst theme = createMuiTheme({\r\n  props: {\r\n    MuiTypography: {\r\n      variantMapping: {\r\n        h1: 'h2',\r\n        h2: 'h2',\r\n        h3: 'h2',\r\n        h4: 'h2',\r\n        h5: 'h2',\r\n        h6: 'h2',\r\n        subtitle1: 'h2',\r\n        subtitle2: 'h2',\r\n        body1: 'span',\r\n        body2: 'span',\r\n      },\r\n    },\r\n  },\r\n})\r\nexport default theme","import React from 'react';\nimport './App.css';\nimport Demo from './demo';\nimport { ThemeProvider } from '@material-ui/core/styles';\nimport CssBaseline from '@material-ui/core/CssBaseline';\nimport theme from './theme';\nimport 'typeface-roboto';\n\nfunction App() {\n  return (\n\n    <ThemeProvider theme={theme}>\n        <CssBaseline />\n          <Demo />\n      </ThemeProvider>\n\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}